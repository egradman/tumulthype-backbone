(function() {
  var CoffeeScriptCompiler, capitalize, coffeescript, formatClassName;

  coffeescript = require('coffee-script');

  capitalize = function(string) {
    return (string[0] || '').toUpperCase() + string.slice(1);
  };

  formatClassName = function(filename) {
    return filename.split('_').map(capitalize).join('');
  };

  module.exports = CoffeeScriptCompiler = (function() {

    CoffeeScriptCompiler.prototype.brunchPlugin = true;

    CoffeeScriptCompiler.prototype.type = 'javascript';

    CoffeeScriptCompiler.prototype.extension = 'coffee';

    CoffeeScriptCompiler.prototype.generators = {
      backbone: {
        model: function(name) {
          return "module.exports = class " + (formatClassName(name)) + " extends Backbone.Model";
        },
        view: function(name) {
          return "template = require './templates/" + name + "'\n\nmodule.exports = class " + (formatClassName(name)) + "View extends Backbone.View\n  template: template";
        }
      },
      chaplin: {
        controller: function(name) {
          return "Controller = require 'controllers/controller'\n" + " = 'models/" + name + "'\n" + "View = require 'views/" + name + "'\n\nmodule.exports = class " + (formatClassName(name)) + "Controller extends Controller\n  historyURL: ''";
        },
        model: function(name) {
          return "Model = require './model'\n\nmodule.exports = class " + (formatClassName(name)) + " extends Model";
        },
        view: function(name) {
          return "View = require './view'\ntemplate = require './templates/" + name + "'\n\nmodule.exports = class " + (formatClassName(name)) + "View extends View\n  template: template";
        }
      }
    };

    function CoffeeScriptCompiler(config) {
      this.config = config;
      null;
    }

    CoffeeScriptCompiler.prototype.compile = function(data, path, callback) {
      var error, result;
      try {
        return result = coffeescript.compile(data);
      } catch (err) {
        return error = err;
      } finally {
        callback(error, result);
      }
    };

    return CoffeeScriptCompiler;

  })();

}).call(this);
